# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security <aside class=\"notice\">   Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely   and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including: </aside>  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    The version of the OpenAPI document: 6.0.0
    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import citypay
from citypay.models.decision import Decision  # noqa: E501
from citypay.rest import ApiException
from citypay.api_client import ApiClient

class TestDecision(unittest.TestCase):
    """Decision unit test stubs"""

    def setUp(self):
        self.data = """
                   {
    "AuthResponse": {
        "amount": 5500,
        "atrn": "atrn1",
        "atsd": "a",
        "authcode": "12345",
        "authen_result": "R",
        "authorised": true,
        "avs_result": "G",
        "bin_commercial": false,
        "bin_debit": false,
        "bin_description": "bin_desc",
        "cavv": "cavvvvvvvvvvvvv",
        "context": "20200812075906AAAGV4",
        "csc_result": "C",
        "currency": "GBP",
        "datetime": "2020-08-12T07:59:11Z",
        "eci": "0",
        "identifier": "ident1",
        "live": true,
        "maskedpan": "400000******0002",
        "merchantid": 12345,
        "result": 1,
        "result_code": "000",
        "result_message": "System: Accepted Transaction",
        "scheme": "VISA_BUSINESS",
        "sha256": "abcdefg",
        "trans_status": "P",
        "transno": 74875
    }
}
                   """
        self.instance = ApiClient().deserialize(self, "Decision")

    def tearDown(self):
        pass

    def testDecisionType(self):
        self.assertTrue(self.instance.result)
        self.assertFalse(self.instance.authentication)
        self.assertFalse(self.instance.challenge)

    def testDecision(self):
        """Test Decision"""
        self.assertEqual(self.instance.result.amount, 5500)
        self.assertEqual(self.instance.result.atrn, "atrn1")
        self.assertEqual(self.instance.result.atsd, "a")
        self.assertEqual(self.instance.result.authcode, "12345")
        self.assertEqual(self.instance.result.authen_result, "R")
        self.assertEqual(self.instance.result.authorised, True)
        self.assertEqual(self.instance.result.avs_result, "G")
        self.assertEqual(self.instance.result.bin_commercial, False)
        self.assertEqual(self.instance.result.bin_debit, False)
        self.assertEqual(self.instance.result.bin_description, "bin_desc")
        self.assertEqual(self.instance.result.cavv, "cavvvvvvvvvvvvv")
        self.assertEqual(self.instance.result.context, "20200812075906AAAGV4")
        self.assertEqual(self.instance.result.csc_result, "C")
        self.assertEqual(self.instance.result.currency, "GBP")
        self.assertEqual(self.instance.result.datetime.isoformat(), "2020-08-12T07:59:11+00:00")
        self.assertEqual(self.instance.result.eci, "0")
        self.assertEqual(self.instance.result.identifier, "ident1")
        self.assertEqual(self.instance.result.live, True)
        self.assertEqual(self.instance.result.maskedpan, "400000******0002")
        self.assertEqual(self.instance.result.merchantid, 12345)
        self.assertEqual(self.instance.result.result, 1)
        self.assertEqual(self.instance.result.result_code, "000")
        self.assertEqual(self.instance.result.result_message, "System: Accepted Transaction")
        self.assertEqual(self.instance.result.scheme, "VISA_BUSINESS")
        self.assertEqual(self.instance.result.sha256, "abcdefg")
        self.assertEqual(self.instance.result.trans_status, "P")
        self.assertEqual(self.instance.result.transno, 74875)


if __name__ == '__main__':
    unittest.main()
